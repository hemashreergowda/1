import java.util.*;

class Dijkstra {
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the Number of Nodes:");
        int vertices = scanner.nextInt();

        int[][] graph = new int[vertices][vertices];

        System.out.println("Enter the Cost Matrix Weights:");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                graph[i][j] = scanner.nextInt();
                if (i == j) {
                    graph[i][j] = 0;
                }
            }
        }

        System.out.println("Enter the Source Vertex:");
        int source = scanner.nextInt() - 1; // Adjusting for 0-based index

        dijkstra(graph, source, vertices);

        scanner.close();
    }

    private static void dijkstra(int[][] graph, int source, int vertices) {
        int[] dist = new int[vertices];
        boolean[] visited = new boolean[vertices];

        Arrays.fill(dist, INF);
        dist[source] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int u = selectMinVertex(dist, visited, vertices);
            visited[u] = true;

            for (int v = 0; v < vertices; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }

        printSolution(dist, vertices, source);
    }

    private static int selectMinVertex(int[] dist, boolean[] visited, int vertices) {
        int min = INF, minIndex = -1;

        for (int v = 0; v < vertices; v++) {
            if (!visited[v] && dist[v] <= min) {
                min = dist[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    private static void printSolution(int[] dist, int vertices, int source) {
        System.out.println("The Shortest Path from Source " + (source + 1) + " to all other vertices are:");

        for (int i = 0; i < vertices; i++) {
            if (i != source) {
                System.out.println("source :" + (source + 1) + "\tdestination :" + (i + 1) + "\tMinCost is :" + (dist[i] == INF ? "INF" : dist[i]));
            }
        }
    }
}
